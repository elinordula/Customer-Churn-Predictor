# -*- coding: utf-8 -*-
"""Customer Churn Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZlR24AqRq2bBOPjzD2G9O1zwZxICIQ8q

Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""Telco Customer Churn Dataset from Kaggle:"""

from google.colab import files
uploaded = files.upload()

"""Load Data"""

import pandas as pd

df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head()

import os
os.listdir()

"""Clean Data"""

df.drop(['customerID'], axis=1, inplace=True)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.dropna(inplace=True)

"""Encode Categorical Columns"""

for column in df.select_dtypes(include='object').columns:
    if column != 'Churn':
        df[column] = LabelEncoder().fit_transform(df[column])

"""Encode Target Variable"""

df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

"""Train/Test Split"""

X = df.drop('Churn', axis=1)
y = df['Churn']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Feature Scaling"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""Model Training: Random Forest"""

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

"""Evaluation"""

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.show()

"""Feature Importance"""

importances = model.feature_importances_
features = X.columns

feature_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_df.sort_values('Importance', ascending=False, inplace=True)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_df.head(10))
plt.title("Top 10 Important Features")
plt.show()

"""User Interface using Gradio"""

import gradio as gr

sample_input = X.iloc[0].copy()

def predict_churn(gender, senior, tenure, monthly, contract):
    sample_input['gender'] = gender
    sample_input['SeniorCitizen'] = senior
    sample_input['tenure'] = tenure
    sample_input['MonthlyCharges'] = monthly
    sample_input['Contract'] = contract

    input_scaled = scaler.transform([sample_input])

    prediction = model.predict(input_scaled)[0]
    return "Will Churn" if prediction == 1 else "Will Stay"

demo = gr.Interface(
    fn=predict_churn,
    inputs=[
        gr.Number(label="Gender (0=Female, 1=Male)"),
        gr.Number(label="SeniorCitizen (0=No, 1=Yes)"),
        gr.Number(label="Tenure (Months)"),
        gr.Number(label="Monthly Charges"),
        gr.Number(label="Contract (0=Month-to-month, 1=One year, 2=Two year)")
    ],
    outputs="text",
    title="""
    <span style='font-size:26px; font-weight:bold'>Customer Churn Predictor</span>
    """,
    description="""
    <span style='font-size:16px'>
    Instantly predict whether a customer will stay or churn by entering just a few details â€” powered by a trained AI model.
    </span>
    """
)

demo.launch(share=True)